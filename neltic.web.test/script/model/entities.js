/*
<auto-generated>
    <source>neltic.model</source>
    <date>2015-01-20 13:37 p. m.</date>
    <by>@neltic</by>
</auto-generated>
*/
var Layer = function (properties) {
    this.model = {
        id: "Id",
        fields: {
            Id: { type: "number" },
            Model: { type: "string" },
            Cost: { type: "number" },
            Added: { type: "date" },
            Active: { type: "boolean" }
        }
    };
    this.entity = {
        Id: 0,
        Model: "",
        Cost: 0.0,
        Added: new Date(),
        Active: true
    };
    this.prepare = [];
    this.emptyEntity = function() { return $.extend({}, this.entity); }
    this.getJSON = function(transport, properties, firstLetterToLowerCase) { var data = {}; if (typeof (properties) === "undefined") { data = this.entity; } else { if (typeof (firstLetterToLowerCase) !== "boolean") firstLetterToLowerCase = true; for (var i = 0; i < properties.length; i++) { var property = properties[i]; data[!firstLetterToLowerCase ? property : (property.charAt(0).toLowerCase() + property.slice(1))] = this.entity[property]; } } var json = { __item__: data }; if (transport !== null && typeof (transport) === "string") { return JSON.stringify(json).replace("__item__", transport); } else { return JSON.stringify(json.__item__); } }
    this.getPreparedJSON = function(firstLetterToLowerCase) { return this.getJSON(null, this.prepare, firstLetterToLowerCase); }
    this.setProperties = function(properties) { if (typeof (properties) === "object") { for (var property in properties) { if (typeof (this.entity[property]) !== "undefined") { var value = properties[property]; if (this.model.fields[property].type === "date") { if (typeof (value) == "string") { if (value.indexOf("/Date(") > -1) { value = new Date(parseInt(value.replace(/\/Date\((-?\d+)\)\//, '$1'))); } } } this.entity[property] = value; this.prepare.push(property); } } } }
    this.setProperties(properties);
};
/*
<auto-generated>
    <source>neltic.utility</source>
    <date>2015-01-20 13:37 p. m.</date>
    <by>@neltic</by>
</auto-generated>
*/
var AjaxResponse = function (properties) {
    this.model = {
        id: "Id",
        fields: {
            Status: { type: "number" },
            Message: { type: "string" },
            Id: { type: "number" },
            Ok: { type: "boolean" }
        }
    };
    this.entity = {
        Status: 200,
        Message: "",
        Id: 0,
        Ok: true
    };
    this.prepare = [];
    this.emptyEntity = function() { return $.extend({}, this.entity); }
    this.getJSON = function(transport, properties, firstLetterToLowerCase) { var data = {}; if (typeof (properties) === "undefined") { data = this.entity; } else { if (typeof (firstLetterToLowerCase) !== "boolean") firstLetterToLowerCase = true; for (var i = 0; i < properties.length; i++) { var property = properties[i]; data[!firstLetterToLowerCase ? property : (property.charAt(0).toLowerCase() + property.slice(1))] = this.entity[property]; } } var json = { __item__: data }; if (transport !== null && typeof (transport) === "string") { return JSON.stringify(json).replace("__item__", transport); } else { return JSON.stringify(json.__item__); } }
    this.getPreparedJSON = function(firstLetterToLowerCase) { return this.getJSON(null, this.prepare, firstLetterToLowerCase); }
    this.setProperties = function(properties) { if (typeof (properties) === "object") { for (var property in properties) { if (typeof (this.entity[property]) !== "undefined") { var value = properties[property]; if (this.model.fields[property].type === "date") { if (typeof (value) == "string") { if (value.indexOf("/Date(") > -1) { value = new Date(parseInt(value.replace(/\/Date\((-?\d+)\)\//, '$1'))); } } } this.entity[property] = value; this.prepare.push(property); } } } }
    this.setProperties(properties);
};
/*
<auto-generated>
    <source>neltic.utility</source>
    <date>2015-01-20 13:37 p. m.</date>
    <by>@neltic</by>
</auto-generated>
*/
var ServiceResponseBoolean = function (properties) {
    this.model = {
        id: "Status",
        fields: {
            Status: { type: "number" },
            Message: { type: "string" },
            Response: { type: "boolean" }
        }
    };
    this.entity = {
        Status: 200,
        Message: "",
        Response: true
    };
    this.prepare = [];
    this.emptyEntity = function() { return $.extend({}, this.entity); }
    this.getJSON = function(transport, properties, firstLetterToLowerCase) { var data = {}; if (typeof (properties) === "undefined") { data = this.entity; } else { if (typeof (firstLetterToLowerCase) !== "boolean") firstLetterToLowerCase = true; for (var i = 0; i < properties.length; i++) { var property = properties[i]; data[!firstLetterToLowerCase ? property : (property.charAt(0).toLowerCase() + property.slice(1))] = this.entity[property]; } } var json = { __item__: data }; if (transport !== null && typeof (transport) === "string") { return JSON.stringify(json).replace("__item__", transport); } else { return JSON.stringify(json.__item__); } }
    this.getPreparedJSON = function(firstLetterToLowerCase) { return this.getJSON(null, this.prepare, firstLetterToLowerCase); }
    this.setProperties = function(properties) { if (typeof (properties) === "object") { for (var property in properties) { if (typeof (this.entity[property]) !== "undefined") { var value = properties[property]; if (this.model.fields[property].type === "date") { if (typeof (value) == "string") { if (value.indexOf("/Date(") > -1) { value = new Date(parseInt(value.replace(/\/Date\((-?\d+)\)\//, '$1'))); } } } this.entity[property] = value; this.prepare.push(property); } } } }
    this.setProperties(properties);
};
/*
<auto-generated>
    <source>neltic.utility</source>
    <date>2015-01-20 13:37 p. m.</date>
    <by>@neltic</by>
</auto-generated>
*/
var KeyValueInt32String = function (properties) {
    this.model = {
        id: "Key",
        fields: {
            Key: { type: "number" },
            Value: { type: "string" }
        }
    };
    this.entity = {
        Key: 0,
        Value: ""
    };
    this.prepare = [];
    this.emptyEntity = function() { return $.extend({}, this.entity); }
    this.getJSON = function(transport, properties, firstLetterToLowerCase) { var data = {}; if (typeof (properties) === "undefined") { data = this.entity; } else { if (typeof (firstLetterToLowerCase) !== "boolean") firstLetterToLowerCase = true; for (var i = 0; i < properties.length; i++) { var property = properties[i]; data[!firstLetterToLowerCase ? property : (property.charAt(0).toLowerCase() + property.slice(1))] = this.entity[property]; } } var json = { __item__: data }; if (transport !== null && typeof (transport) === "string") { return JSON.stringify(json).replace("__item__", transport); } else { return JSON.stringify(json.__item__); } }
    this.getPreparedJSON = function(firstLetterToLowerCase) { return this.getJSON(null, this.prepare, firstLetterToLowerCase); }
    this.setProperties = function(properties) { if (typeof (properties) === "object") { for (var property in properties) { if (typeof (this.entity[property]) !== "undefined") { var value = properties[property]; if (this.model.fields[property].type === "date") { if (typeof (value) == "string") { if (value.indexOf("/Date(") > -1) { value = new Date(parseInt(value.replace(/\/Date\((-?\d+)\)\//, '$1'))); } } } this.entity[property] = value; this.prepare.push(property); } } } }
    this.setProperties(properties);
};
