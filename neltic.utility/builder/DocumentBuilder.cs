namespace neltic.utility.builder
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Xml.Linq;

    public abstract class DocumentBuilder
    {
        protected string indent = string.Empty;
        protected const string DEFAULT_INDENT = "    ";
        protected StringBuilder builder = new StringBuilder();
        protected static string __SQL_QUOTE_START__ = "[";
        protected static string __SQL_QUOTE_END__ = "]";

        public void SetSqlQuote(string start, string end)
        {
            __SQL_QUOTE_START__ = start;
            __SQL_QUOTE_END__ = end;
        }

        protected void AddHeader(string source)
        {
            AddLine("/*");
            AddLine("<auto-generated>");
            AddIndent();
            AddLine("<source>{0}</source>", source);
            AddLine("<date>{0}</date>", DateTime.Now.ToString("yyyy-MM-dd HH:mm tt"));
            AddLine("<by>@neltic</by>");
            RemoveIndent();
            AddLine("</auto-generated>");
            AddLine("*/");
        }

        protected void AddEmptyLine()
        {
            builder.Append(Environment.NewLine);
        }
        protected void AddLine(string format, params object[] args)
        {
            builder.Append(indent);
            builder.AppendFormat(format, args);
            builder.Append(Environment.NewLine);
        }
        protected void AddIndent()
        {
            indent += DEFAULT_INDENT;
        }
        protected void RemoveIndent()
        {
            if (indent.Length > DEFAULT_INDENT.Length)
            {
                indent = indent.Substring(0, indent.Length - DEFAULT_INDENT.Length);
            }
            else
            {
                indent = string.Empty;
            }
        }

        protected void CloseBracket(string endWith = "")
        {
            AddLine("}}" + endWith);
        }

        protected void AddText(string text)
        {
            builder.Append(text);
        }

        public override string ToString()
        {
            return builder.ToString();
        }

        public List<KeyValue<string, string>> GetElements(IEnumerable<XElement> xElements)
        {
            List<KeyValue<string, string>> elements = new List<KeyValue<string, string>>();
            foreach (XElement element in xElements)
            {
                elements.Add(new KeyValue<string, string>() { Key = element.Attribute("key").Value, Value = element.Attribute("value").Value });
            }
            return elements;
        }
    }
}